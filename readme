thinking about a declarative query language.

You could do joins like

var query = {
	parent: tablename 
	children: query 
}

the child query would select another group of items

Thinking also about eventual transaction consistency .. we could 'collect'
data using promises, async callbacks.. when the transaction succeeds,
we get a callback.. if the transaction fails, we can purge later the 
half-completed data ...

currently ... 
It sort of works. I can do a simple query. I can get an object graph back. However
there is no support for any sort of filtering in the queries. The ID fields are 
hard coded. There are some other things. Not great.

Some other ideas that I had .. what if we put sql snippets inline in the 
json? maybe that could work like we put inline xpath into jath?

Tests:
run using expresso

# currently this works.. maps fields 1:1 .. 
# the code is hard coded to use a specific join criteria and only 
# looks at the field name not the value for mappings.
var query = [ 
	"parent", { 
		"id":"id", 
		"text":"text",
		"children": [ 
			"child", { 
				"id":"id", 
				"text":"text"
			} 
		]
	} 
];

# one possibility, specifying a particular parent, inspired by xpath
# note that the join criteria are specified in the child query
var query = [ 
	"parent[id=1]", { 
		"id":"id", 
		"text":"text",
		"children": [ 
			"child[id=parent_id]", { 
				"id":"id", 
				"text":"text"
			} 
		]
	} 
];

# another possibility, specifying a particular parent
# using the field spec as the criteria.
var query = [ 
	"parent", { 
		"id":"id=1", 
		"text":"text",
		"children": [ 
			"child", { 
				"id":"id", 
				"text":"text"
			} 
		]
	} 
];
